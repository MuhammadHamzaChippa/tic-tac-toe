{"version":3,"sources":["counter/app.cljs"],"mappings":"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","names":["js/counter","js/counter.app","js/counter.app.app-state","counter.app/app-state","reagent.core.atom","cljs.core/vec","cljs.core.repeat","counter.app/current-squares","cljs.core/deref","cljs.core.get_in","counter.app/current-next-player","counter.app/get-winner","squares","lines","cljs.core/first","cljs.core.take","iter__4652__auto__","s__27095","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","cljs.core/count","b__27097","cljs.core/chunk-buffer","i__27096","cljs.core/-nth","vec__27098","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__27094","cljs.core/chunk-rest","vec__27101","cljs.core/cons","cljs.core/rest","line","a","b","c","res","and__4251__auto__","cljs.core._EQ_","counter.app/on-click-handler","i","current-index","next-player","updated-squares","cljs.core.assoc","updated-next-player","new-state","p1__27104#","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core.conj","cljs.core.subvec","cljs.core/assoc-in","counter.app/square","click-handler","square-value","counter.app/render-square","value","counter.app/board","counter.app/get-status","temp__5751__auto__","winner","counter.app/moves","history","s__27106","b__27108","i__27107","vec__27109","iter__27105","vec__27112","idx","state","cljs.core.map_indexed","cljs.core/vector","reagent-mui.material.button/button","counter.app/Application","reagent.dom.render","js/document.getElementById","counter.app/init","cljs.core.println","cljs.core/chunk-first"],"sourcesContent":["(ns counter.app\n  (:require [reagent.core :as r]\n            [reagent.dom :as dom]\n            [reagent-mui.material.button :refer [button]])\n  )\n\n(defonce app-state (r/atom {:history [{:squares (vec (repeat 9 nil))\n                                     :next-player \"X\"}]\n                          :current-index 0}))\n\n(defn current-squares []\n  (get-in @app-state [:history (:current-index @app-state) :squares]))\n\n(defn current-next-player []\n  (get-in @app-state [:history (:current-index @app-state) :next-player]))\n\n\n(defn get-winner [squares]\n  (let [lines [[0, 1, 2]\n               [3, 4, 5]\n               [6, 7, 8]\n               [0, 3, 6]\n               [1, 4, 7]\n               [2, 5, 8]\n               [0, 4, 8]\n               [2, 4, 6]]]\n    (first (take 1 (for [line lines\n                         :let [[a b c] line\n                               res (if (and\n                                        (nth squares a)\n                                        (= (nth squares a) (nth squares b))\n                                        (= (nth squares a) (nth squares c)))\n                                     (nth squares a))]\n                         :when (some? res)]\n                     res)))))\n\n(defn on-click-handler [i]\n  (when-not (get-winner (current-squares))\n    (let [current-index (:current-index @app-state)\n          next-player (current-next-player)\n          updated-squares (assoc (current-squares) i next-player)\n          updated-next-player (if (= \"X\" next-player) \"O\" \"X\")\n          new-state {:squares updated-squares\n                     :next-player updated-next-player}]\n      (swap! app-state update-in [:history]\n             #(conj (subvec %1 0 (inc current-index)) new-state))\n      (swap! app-state assoc-in [:current-index] (inc current-index)))))\n\n(defn square [click-handler square-value]\n  [:button\n   {:class \"square\"\n    :on-click click-handler}\n   square-value])\n\n(defn render-square [i]\n  (let [value (nth (current-squares) i)]\n    [square (fn [] (on-click-handler i)) [:span (cond\n                                                  (= value \"X\") {:style {:color \"red\"}}\n                                                  (= value \"O\") {:style {:color \"green\"}})\n                                          (nth (current-squares) i)]]))\n\n(defn board []\n  [:div\n   [:div.board-row\n    [render-square 0]\n    [render-square 1]\n    [render-square 2]]\n   [:div.board-row\n    [render-square 3]\n    [render-square 4]\n    [render-square 5]]\n   [:div.board-row\n    [render-square 6]\n    [render-square 7]\n    [render-square 8]]])\n\n\n(defn get-status []\n  (if-let [winner (get-winner (current-squares))]\n    [:div {:class \"winner-div\"} (str \"Winner: \" winner)]\n    [:div {:class \"status-div\"} (str \"Next turn: \" (current-next-player))]))\n\n\n(defn moves []\n  (let [history (:history @app-state)]\n    (for [[idx state] (map-indexed vector history)]\n      ^{:key idx} [:div\n                   [button\n                    {:style {:margin-bottom \"5px\" :width \"100%\"}\n                     :variant \"contained\"\n                     :class \"status-button\"\n                     :on-click #(swap! app-state assoc-in [:current-index] idx)}\n                    (if (zero? idx)\n                      \"Go to game start\"\n                      (str \"Go to move #: \" idx))]])))\n\n(defn Application []\n  [:div.game\n   [:div.game-board\n    [board]]\n   [:div.game-info\n    [:div (get-status)]\n    [:div {:style {:padding-top \"3px\"}} (moves)]]])\n\n(dom/render [Application] (js/document.getElementById \"app\"))\n\n(defn init []\n  (println \"App initialization!\"))\n"]}